# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pfruck_contabo.models.ip_config import IpConfig
from pfruck_contabo.models.private_ip_config import PrivateIpConfig
from typing import Optional, Set
from typing_extensions import Self

class Instances(BaseModel):
    """
    Instances
    """ # noqa: E501
    instance_id: StrictInt = Field(description="Instance id", alias="instanceId")
    display_name: StrictStr = Field(description="Instance display name", alias="displayName")
    name: StrictStr = Field(description="Instance name")
    product_id: StrictStr = Field(description="Product id", alias="productId")
    private_ip_config: PrivateIpConfig = Field(alias="privateIpConfig")
    ip_config: IpConfig = Field(alias="ipConfig")
    status: StrictStr = Field(description="State of the instance in the Private Network")
    error_message: Optional[StrictStr] = Field(default=None, description="Message in case of an error.", alias="errorMessage")
    __properties: ClassVar[List[str]] = ["instanceId", "displayName", "name", "productId", "privateIpConfig", "ipConfig", "status", "errorMessage"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ok', 'restart', 'reinstall', 'reinstallation failed', 'installing']):
            raise ValueError("must be one of enum values ('ok', 'restart', 'reinstall', 'reinstallation failed', 'installing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_ip_config
        if self.private_ip_config:
            _dict['privateIpConfig'] = self.private_ip_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_config
        if self.ip_config:
            _dict['ipConfig'] = self.ip_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceId": obj.get("instanceId"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "productId": obj.get("productId"),
            "privateIpConfig": PrivateIpConfig.from_dict(obj["privateIpConfig"]) if obj.get("privateIpConfig") is not None else None,
            "ipConfig": IpConfig.from_dict(obj["ipConfig"]) if obj.get("ipConfig") is not None else None,
            "status": obj.get("status"),
            "errorMessage": obj.get("errorMessage")
        })
        return _obj


