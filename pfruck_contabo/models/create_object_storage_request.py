# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pfruck_contabo.models.auto_scaling_type_request import AutoScalingTypeRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateObjectStorageRequest(BaseModel):
    """
    CreateObjectStorageRequest
    """ # noqa: E501
    region: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Region where the object storage should be located. Default is EU. Available regions: EU, US-central, SIN")
    auto_scaling: Optional[AutoScalingTypeRequest] = Field(default=None, description="Autoscaling settings", alias="autoScaling")
    total_purchased_space_tb: Union[StrictFloat, StrictInt] = Field(description="Amount of purchased / requested object storage in TB.", alias="totalPurchasedSpaceTB")
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="Display name helps to differentiate between object storages, especially if they are in the same region. If display name is not provided, it will be generated. Display name can be changed any time.", alias="displayName")
    __properties: ClassVar[List[str]] = ["region", "autoScaling", "totalPurchasedSpaceTB", "displayName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateObjectStorageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_scaling
        if self.auto_scaling:
            _dict['autoScaling'] = self.auto_scaling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateObjectStorageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "region": obj.get("region") if obj.get("region") is not None else 'EU',
            "autoScaling": AutoScalingTypeRequest.from_dict(obj["autoScaling"]) if obj.get("autoScaling") is not None else None,
            "totalPurchasedSpaceTB": obj.get("totalPurchasedSpaceTB"),
            "displayName": obj.get("displayName")
        })
        return _obj


