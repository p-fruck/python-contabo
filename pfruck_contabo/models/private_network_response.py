# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from pfruck_contabo.models.instances import Instances
from typing import Optional, Set
from typing_extensions import Self

class PrivateNetworkResponse(BaseModel):
    """
    PrivateNetworkResponse
    """ # noqa: E501
    tenant_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Your customer tenant id", alias="tenantId")
    customer_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Your customer number", alias="customerId")
    private_network_id: StrictInt = Field(description="Private Network's id", alias="privateNetworkId")
    data_center: StrictStr = Field(description="The data center where your Private Network is located", alias="dataCenter")
    region: StrictStr = Field(description="The slug of the region where your Private Network is located")
    region_name: StrictStr = Field(description="The region where your Private Network is located", alias="regionName")
    name: StrictStr = Field(description="The name of the Private Network")
    description: StrictStr = Field(description="The description of the Private Network")
    cidr: StrictStr = Field(description="The cidr range of the Private Network")
    available_ips: StrictInt = Field(description="The total available IPs of the Private Network", alias="availableIps")
    created_date: datetime = Field(description="The creation date of the Private Network", alias="createdDate")
    instances: List[Instances]
    __properties: ClassVar[List[str]] = ["tenantId", "customerId", "privateNetworkId", "dataCenter", "region", "regionName", "name", "description", "cidr", "availableIps", "createdDate", "instances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateNetworkResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateNetworkResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "customerId": obj.get("customerId"),
            "privateNetworkId": obj.get("privateNetworkId"),
            "dataCenter": obj.get("dataCenter"),
            "region": obj.get("region"),
            "regionName": obj.get("regionName"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cidr": obj.get("cidr"),
            "availableIps": obj.get("availableIps"),
            "createdDate": obj.get("createdDate"),
            "instances": [Instances.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None
        })
        return _obj


