# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from pfruck_contabo.models.application_config import ApplicationConfig
from pfruck_contabo.models.application_requirements import ApplicationRequirements
from typing import Optional, Set
from typing_extensions import Self

class ApplicationResponse(BaseModel):
    """
    ApplicationResponse
    """ # noqa: E501
    application_id: StrictStr = Field(description="Application ID", alias="applicationId")
    tenant_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Tenant ID", alias="tenantId")
    customer_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Customer ID", alias="customerId")
    name: StrictStr = Field(description="Application Name")
    description: StrictStr = Field(description="Application Description")
    type: StrictStr = Field(description="Application type")
    application_config: List[ApplicationConfig] = Field(description="Application Config", alias="applicationConfig")
    requirements: ApplicationRequirements = Field(description="Application Requirements")
    __properties: ClassVar[List[str]] = ["applicationId", "tenantId", "customerId", "name", "description", "type", "applicationConfig", "requirements"]

    @field_validator('tenant_id')
    def tenant_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DE', 'INT']):
            raise ValueError("must be one of enum values ('DE', 'INT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['standard', 'crypto']):
            raise ValueError("must be one of enum values ('standard', 'crypto')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_config (list)
        _items = []
        if self.application_config:
            for _item in self.application_config:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applicationConfig'] = _items
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict['requirements'] = self.requirements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationId": obj.get("applicationId"),
            "tenantId": obj.get("tenantId"),
            "customerId": obj.get("customerId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "applicationConfig": [ApplicationConfig.from_dict(_item) for _item in obj["applicationConfig"]] if obj.get("applicationConfig") is not None else None,
            "requirements": ApplicationRequirements.from_dict(obj["requirements"]) if obj.get("requirements") is not None else None
        })
        return _obj


