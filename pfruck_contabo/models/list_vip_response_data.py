# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfruck_contabo.models.ip_v41 import IpV41
from typing import Optional, Set
from typing_extensions import Self

class ListVipResponseData(BaseModel):
    """
    ListVipResponseData
    """ # noqa: E501
    tenant_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Tenant Id.", alias="tenantId")
    customer_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Customer's Id.", alias="customerId")
    vip_id: StrictStr = Field(description="Vip uuid.", alias="vipId")
    data_center: StrictStr = Field(description="data center.", alias="dataCenter")
    region: StrictStr = Field(description="Region")
    resource_id: StrictStr = Field(description="Resource Id.", alias="resourceId")
    resource_type: Optional[StrictStr] = Field(default=None, description="The resourceType using the VIP.", alias="resourceType")
    resource_name: StrictStr = Field(description="Resource name.", alias="resourceName")
    resource_display_name: StrictStr = Field(description="Resource display name.", alias="resourceDisplayName")
    ip_version: StrictStr = Field(description="Version of Ip.", alias="ipVersion")
    type: Optional[StrictStr] = Field(default=None, description="The VIP type.")
    v4: Optional[IpV41] = None
    __properties: ClassVar[List[str]] = ["tenantId", "customerId", "vipId", "dataCenter", "region", "resourceId", "resourceType", "resourceName", "resourceDisplayName", "ipVersion", "type", "v4"]

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['instances', 'bare-metal', 'null']):
            raise ValueError("must be one of enum values ('instances', 'bare-metal', 'null')")
        return value

    @field_validator('ip_version')
    def ip_version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['v4']):
            raise ValueError("must be one of enum values ('v4')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['additional', 'floating']):
            raise ValueError("must be one of enum values ('additional', 'floating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListVipResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of v4
        if self.v4:
            _dict['v4'] = self.v4.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListVipResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "customerId": obj.get("customerId"),
            "vipId": obj.get("vipId"),
            "dataCenter": obj.get("dataCenter"),
            "region": obj.get("region"),
            "resourceId": obj.get("resourceId"),
            "resourceType": obj.get("resourceType"),
            "resourceName": obj.get("resourceName"),
            "resourceDisplayName": obj.get("resourceDisplayName"),
            "ipVersion": obj.get("ipVersion"),
            "type": obj.get("type"),
            "v4": IpV41.from_dict(obj["v4"]) if obj.get("v4") is not None else None
        })
        return _obj


