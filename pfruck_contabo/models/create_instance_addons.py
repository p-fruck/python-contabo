# coding: utf-8

"""
    Contabo API


    The version of the OpenAPI document: 1.0.0
    Contact: support@contabo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pfruck_contabo.models.add_on_request import AddOnRequest
from pfruck_contabo.models.extra_storage_request import ExtraStorageRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateInstanceAddons(BaseModel):
    """
    CreateInstanceAddons
    """ # noqa: E501
    private_networking: Optional[Dict[str, Any]] = Field(default=None, description="Set this attribute if you want to upgrade your instance with the Private Networking addon.   Please provide an empty object for the time being as value. There will be more configuration possible   in the future.", alias="privateNetworking")
    additional_ips: Optional[Dict[str, Any]] = Field(default=None, description="Set this attribute if you want to upgrade your instance with the Additional IPs addon. Please provide an empty object for the time being as value. There will be more configuration possible in the future.", alias="additionalIps")
    extra_storage: Optional[ExtraStorageRequest] = Field(default=None, description="Set this attribute if you want to upgrade your instance with the Extra Storage addon.", alias="extraStorage")
    custom_image: Optional[Dict[str, Any]] = Field(default=None, description="Set this attribute if you want to upgrade your instance with the Custom Images addon.   Please provide an empty object for the time being as value. There will be more configuration possible   in the future.", alias="customImage")
    addons_ids: Optional[List[AddOnRequest]] = Field(default=None, alias="addonsIds")
    __properties: ClassVar[List[str]] = ["privateNetworking", "additionalIps", "extraStorage", "customImage", "addonsIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInstanceAddons from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extra_storage
        if self.extra_storage:
            _dict['extraStorage'] = self.extra_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addons_ids (list)
        _items = []
        if self.addons_ids:
            for _item in self.addons_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addonsIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInstanceAddons from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "privateNetworking": obj.get("privateNetworking"),
            "additionalIps": obj.get("additionalIps"),
            "extraStorage": ExtraStorageRequest.from_dict(obj["extraStorage"]) if obj.get("extraStorage") is not None else None,
            "customImage": obj.get("customImage"),
            "addonsIds": [AddOnRequest.from_dict(_item) for _item in obj["addonsIds"]] if obj.get("addonsIds") is not None else None
        })
        return _obj


